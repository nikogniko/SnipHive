<!-- Views/Snippets/_SnippetCard.cshtml -->
@model SnippetsLibraryWebApp.Models.SnippetModel
@using SnippetsLibraryWebApp.Repository
@inject ProgrammingLanguageRepository _programmingLanguageRepository
@inject UserRepository _userRepository

<div class="snippet-card" tabindex="0">
    <div class="snippet-header">
        <h3 class="snippet-title">@Model.Title</h3>
        <div class="snippet-meta">
            <span class="snippet-language">@await GetProgrammingLanguageName(Model.ProgrammingLanguageID)</span>
            <span class="snippet-saves">
                <i class="fas fa-star"></i> @Model.SavesCount
            </span>
        </div>
    </div>
    <div class="snippet-info">
        @if (ViewBag.PageType != "MySnippets")
        {
            <span class="snippet-author">Автор: @await GetAuthorName(Model.AuthorID)</span>
        }
        else
        {
            <span class="snippet-status">Статус: @Model.Status.ToUpperInvariant()</span>
        }
    </div>
    <div class="snippet-updated">
        Оновлено: @Model.UpdatedAt.ToString("dd.MM.yyyy 'о' HH:mm")
    </div>
    <div class="snippet-tags mb-2">
        @foreach (var tag in Model.Tags)
        {
            <span class="badge bg-secondary me-1">@tag.Name</span>
        }
    </div>
    <div class="snippet-categories mb-2">
        @foreach (var category in Model.Categories)
        {
            <span class="badge bg-primary me-1">@category.Name</span>
        }
    </div>
    <div class="snippet-description">
        <p>@TruncateDescription(Model.Description)</p>
        <button class="details-btn" data-id="@Model.ID">Деталі</button>
    </div>
</div>

@functions {
    // Метод для отримання назви мови програмування за її ID
    public async Task<string> GetProgrammingLanguageName(int id)
    {
        // Реалізуйте логіку для отримання назви мови програмування
        var languages = await _programmingLanguageRepository.GetAllProgrammingLanguagesAsync();

        return languages.Any(x => x.ID == id) ? languages.Where(x => x.ID == id).FirstOrDefault().Name : "Unknown";
    }

    // Метод для отримання імені автора за його ID
    public async Task<string> GetAuthorName(int authorId)
    {
        var username = await _userRepository.GetUsernameByIdAsync(authorId);
        return username;
    }

    // Метод для обрізання опису до певної довжини
    public string TruncateDescription(string description, int maxLength = 100)
    {
        if (string.IsNullOrEmpty(description))
            return string.Empty;

        return description.Length > maxLength ? description.Substring(0, maxLength) + "..." : description;
    }
}

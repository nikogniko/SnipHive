<!-- Views/Snippets/Details.cshtml -->
@model SnippetsLibraryWebApp.Models.SnippetModel
@using SnippetsLibraryWebApp.Repository
@inject ProgrammingLanguageRepository _programmingLanguageRepository;
@{
    ViewData["Title"] = "Деталі сніпета";
}

<div class="snippet-details">
    <h2 class="snippet-title">@Model.Title</h2>
    <div class="snippet-meta">
        <span class="snippet-language">@await GetProgrammingLanguageName(Model.ProgrammingLanguageID)</span>
        <span class="snippet-saves">
            <i class="fas fa-star"></i> @Model.SavesCount
        </span>
    </div>
    <div class="snippet-info">
        <span class="snippet-author">Автор: @GetAuthorName(Model.AuthorID)</span>
    </div>
    <div class="snippet-updated">
        Оновлено: @Model.UpdatedAt.ToString("dd.MM.yyyy 'о' HH:mm")
    </div>
    <div class="snippet-tags">
        @foreach (var tag in Model.Tags)
        {
            <span class="snippet-tag">@tag.Name</span>
        }
    </div>
    <div class="snippet-categories">
        <strong>Категорії:</strong>
        @foreach (var category in Model.Categories)
        {
            <span class="snippet-category">@category.Name</span>
        }
    </div>
    <div class="snippet-code">
        <pre>@Model.Code</pre>
    </div>
    <div class="snippet-description-full">
        <p>@Model.Description</p>
    </div>
</div>

@functions {
    // Метод для отримання назви мови програмування за її ID
    public async Task<string> GetProgrammingLanguageName(int id)
    {
        // Реалізуйте логіку для отримання назви мови програмування
        var languages = await _programmingLanguageRepository.GetAllProgrammingLanguagesAsync();

        return languages.Any(x => x.ID == id) ? languages.Where(x => x.ID == id).FirstOrDefault().Name : "Unknown";
    }

    // Метод для отримання імені автора за його ID
    public string GetAuthorName(int authorId)
    {
        // Реалізуйте логіку для отримання імені автора
        return $"Користувач {authorId}";
    }
}
